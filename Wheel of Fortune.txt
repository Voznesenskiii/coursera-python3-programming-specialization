VOWEL_COST = 250
LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
VOWELS = 'AEIOU'

# Write the WOFPlayer class definition (part A) here
class WOFPlayer():
    def __init__(self, name):
        self.name = name
        self.prizeMoney = 0
        self.prizes = []
    def addMoney(self,amt):
        self.prizeMoney += amt
    def goBankrupt(self):
        self.prizeMoney = 0
    def addPrize(self, prize):
        self.prizes.append(prize)
    def __str__(self):
        return "{} (${})".format(self.name, self.prizeMoney)
# Write the WOFHumanPlayer class definition (part B) here
class WOFHumanPlayer(WOFPlayer):
    def getMove(self, category, obscuredPhrase, guessed): 
        str = "{} has ${}\n Category: {} \n Phrase:  {}\n Guessed: {} \n Guess a letter, phrase, or type 'exit' or 'pass':"
        return input(str.format(self.name, self.prizeMoney, category, obscuredPhrase, guessed))
# Write the WOFComputerPlayer class definition (part C) here
class WOFComputerPlayer(WOFPlayer):
    SORTED_FREQUENCIES = 'ZQXJKVBPYGFWMUCLDRHSNIOATE'
    def __init__(self, name, difficulty):
        WOFPlayer.__init__(self, name)
        self.difficulty = difficulty
    def smartCoinFlip(self):
        rand_number = random.randint(1, 10)
        if rand_number > self.difficulty:
            return True
        else:
            return False
    def getPossibleLetters(self, guessed):
        lst = []
        for s in LETTERS:
            if (s not in guessed and s in VOWELS and self.prizeMoney >= VOWEL_COST) or ( s not in guessed and s not in VOWELS):
                lst.append(s)
        return lst
    def getMove(self, category, obscuredPhrase, guessed):
        lst = self.getPossibleLetters(guessed)
        if len(lst) == 0:
            return 'pass'
        m = self.smartCoinFlip()
        if m:
            for s in self.SORTED_FREQUENCIES:
                if s in lst: 
                    return s
        else:
            return random.choice(lst)
            
            